(ns day01
  (:require [clojure.string :as str]))

(->> (slurp "day01.input")
     (str/split-lines)
     (map #(Integer/parseInt %))
     (partition 2 1)
     (filter (fn [[first second]] (> second first)))
     (count)
     (println "Part 1:"))

(->> (slurp "day01.input")
     (str/split-lines)
     (map #(Integer/parseInt %))
     (partition 3 1)
     (map #(apply + %))
     (partition 2 1)
     (filter (fn [[first second]] (> second first)))
     (count)
     (println "Part 2:"))
